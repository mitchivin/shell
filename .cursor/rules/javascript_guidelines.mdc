---
description: 
globs: 
alwaysApply: true
---
# JavaScript Guidelines

These guidelines detail standard practices for writing JavaScript code within the Windows XP simulation project, covering modularity, DOM interaction, event handling, application management, and more.

## Modularity & Code Organization

*   **ES6 Modules**: The project uses ES6 modules (`import`/`export` syntax) for organizing JavaScript code.
    *   Core GUI components (e.g., `Desktop`, `Taskbar`, `WindowManager`, `StartMenu`) are typically defined as classes or collections of functions within modules located in `src/scripts/gui/`.
        *   Example: `import Desktop from "./gui/desktop.js";` in `[src/scripts/main.js](mdc:src/scripts/main.js)`.
    *   Utility functions and modules are placed in `src/scripts/utils/` (e.g., `[eventBus.js](mdc:src/scripts/utils/eventBus.js)`, `[programRegistry.js](mdc:src/scripts/utils/programRegistry.js)`).
    *   Application-specific JavaScript (e.g., `[src/apps/about/about.js](mdc:src/apps/about/about.js)`) should also be written in a modular way, though they might be simpler scripts if their scope is limited.
*   **Entry Point**: The main application logic starts in `[src/scripts/main.js](mdc:src/scripts/main.js)`, which initializes core components and sets up global event listeners after the `DOMContentLoaded` event.

## DOM Manipulation

*   **Element Selection**: Use standard DOM methods like `document.getElementById()`, `document.querySelector()`, and `document.querySelectorAll()`.
*   **Caching References**: For DOM elements that are accessed multiple times, cache the reference in a variable to avoid repeated queries (e.g., `const startButton = document.getElementById('start-button');`).
*   **Element Creation**: Use `document.createElement()` to create new DOM elements. Set their properties and attributes before appending them to the DOM to minimize reflows.
*   **Classes vs. Inline Styles**: Prefer adding/removing CSS classes to manipulate element styles over setting inline styles directly in JavaScript, especially for complex state changes. Inline styles are acceptable for dynamic properties that cannot be easily expressed with classes (e.g., `element.style.transform = 'translate(...)'`).

## Event Handling

*   **`addEventListener`**: Use `element.addEventListener('eventtype', handlerFunction)` for attaching event listeners. Provide options like `{ passive: true }` where appropriate for performance (e.g., scroll listeners not calling `preventDefault`).
*   **`removeEventListener`**: Crucially, remove event listeners when components are destroyed or elements are removed from the DOM to prevent memory leaks. This is especially important for listeners attached to global objects like `window` or `document` by specific components.
*   **Event Bus**: The project uses a custom `eventBus` (`[src/scripts/utils/eventBus.js](mdc:src/scripts/utils/eventBus.js)`) for decoupled communication between different modules/components. Predefined `EVENTS` are exported by the event bus for consistency.
    *   Use `eventBus.subscribe(EVENTS.SOME_EVENT, handler)` and `eventBus.publish(EVENTS.SOME_EVENT, data)`.
    *   This is suitable for global events or when direct component references are undesirable (e.g., `EVENTS.SHUTDOWN_REQUESTED`, `EVENTS.WINDOW_CREATED`).
*   **`DOMContentLoaded`**: Core initialization in `[src/scripts/main.js](mdc:src/scripts/main.js)` and app-specific setup in files like `[src/apps/about/about.js](mdc:src/apps/about/about.js)` often occurs within a `DOMContentLoaded` listener.

## Application Management (`WindowManager` & `ProgramRegistry`)

*   **`[programRegistry.js](mdc:src/scripts/utils/programRegistry.js)`**: This module acts as a central database for all applications. When creating a new application, it must be registered here. The registry defines:
    *   Window ID, title, icon.
    *   Iframe path (`appPath`) for iframe-based apps.
    *   Default dimensions, resizability, maximizability.
    *   Configuration for menu bars, toolbars, and address bars if applicable.
*   **`[window.js](mdc:src/scripts/gui/window.js)` (`WindowManager` class)**: This is the core module responsible for:
    *   Creating, opening, and managing the lifecycle of application windows based on configurations from `programRegistry.js`.
    *   Handling window interactions: dragging, resizing, minimizing, maximizing, closing.
    *   Managing window focus and z-index stacking.
    *   Loading iframe content for applications.

## State Management

*   **Component State**: Individual UI components (like `StartMenu`, `Taskbar`) manage their own internal state (e.g., whether the start menu is open, active taskbar item).
*   **Global State**: For simple global states, direct variables or properties on core modules might be used. `sessionStorage` is used in `[src/scripts/gui/boot.js](mdc:src/scripts/gui/boot.js)` to remember the login state (`logged_in`).
*   For more complex shared state that doesn't fit the event bus model, consider whether it can be managed by a parent component or if a more formal small-scale state store is needed (though none exists globally currently).

## Asynchronous Operations

*   Use Promises or `async/await` for handling asynchronous operations (e.g., fetching data, waiting for animations if promise-based).
*   The boot sequence (`[src/scripts/gui/boot.js](mdc:src/scripts/gui/boot.js)`) uses timeouts and class toggles to manage its animation stages.

## Performance Considerations

*   **Asset Preloading**: Critical HTML/iframe content and image/video assets are preloaded in `[src/scripts/main.js](mdc:src/scripts/main.js)` and `[index.html](mdc:index.html)` to improve perceived load time.
*   **DOM Updates**: Be mindful of the cost of frequent DOM manipulations. Batch updates where possible or use techniques like document fragments if creating many elements.
*   **Event Listener Management**: As mentioned, clean up event listeners properly.

## Mobile & Device Interaction

*   **Device Detection**: `isMobileDevice()` from `[src/scripts/utils/device.js](mdc:src/scripts/utils/device.js)` can be used for logic specific to mobile devices.
*   **Orientation/Resize**: Global handlers for `orientationchange` and `resize` are set up in `[src/scripts/main.js](mdc:src/scripts/main.js)` to adjust UI (e.g., landscape block, `--real-vh` variable).
*   **Touch Events**: `[src/scripts/main.js](mdc:src/scripts/main.js)` includes a basic double-tap prevention mechanism using `touchstart` events.

## Error Handling

*   Implement basic error handling using `try...catch` blocks for operations that might fail (e.g., interacting with potentially non-existent DOM elements if not carefully checked, issues during asset loading if not preloaded).
*   Use `console.error()` for logging errors during development.

## Code Style & Comments

*   Follow existing code style (camelCase for variables/functions, consistent indentation). Many files use JSDoc-style comments for modules, classes, and functions â€“ continue this practice.

